using System.Collections.Specialized;
using System.Text;
using System.Text.RegularExpressions;

namespace BarcodeApp
{
    /// <summary>
    /// This class contains the parsed elements of a line of a ini file.
    /// A ini file line is composed by a name and a series of couples parameter=value.
    /// As example,
    /// SCALE Type=Mettler Port=COM1:2400,4,7,1
    /// </summary>
    public class IniValue
    {
        /// <summary>
        /// The parameter name
        /// </summary>
        public string Name;

        /// <summary>
        /// The parameter values.
        /// </summary>
        public StringCollection Values;

        /// <summary>
        /// The parameter names. The names are always in uppercase.
        /// </summary>
        public StringCollection Parameters;

        ///<summary>
        ///The unparsed INI file line.
        ///</summary>
        public string Line;

        /// <summary>
        /// The line number of the INI file.
        /// </summary>
        public readonly int NumLine;

        /// <summary>
        /// In case of error during execution of INI file command,
        /// any text written here is displayed to the user.
        /// </summary>
        public string ErrorDescription;

        /// <summary>
        /// Container for dynamic properties generated by calling the method 'CreateDynamicProperties'
        /// </summary>
        public dynamic Data { get; } = new System.Dynamic.ExpandoObject();
        private readonly object _createDynamicPropertiesLocker = new object();

        /// <summary>
        /// Class constructor.
        /// If the string starts with ';' or is empty, the object will contain a "" in the name and no parameters.
        /// </summary>
        /// <param name="line">The INI line from the file.</param>
        /// <param name="numLine">The line number from the INI file.</param>
        public IniValue(string line, int numLine) : this()
        {
            Line = line;
            NumLine = numLine;
            Parse(line);
        }

        /// <summary>
        /// Class constructor
        /// </summary>
        public IniValue()
        {
            Values = new StringCollection();
            Parameters = new StringCollection();
            Line = "";
            Name = "";
            NumLine = 0;
        }

        /// <summary>
        /// Class constructor
        /// </summary>
        /// <param name="name">The ini value name</param>
        public IniValue(string name) : this()
        {
            Name = name;
        }

        /// <summary>
        /// Add a parameter and its value to a IniValue object
        /// </summary>
        /// <param name="param"></param>
        /// <param name="val"></param>
        public void AddParamValue(string param, string val)
        {
            int i = Parameters.Add(param.ToUpper());
            if (Values.Count < i - 1)
            {
                throw new ArgumentException("Inconsitent parameter / value count");
            }

            Values.Add(val);
        }

        /// <summary>
        /// Create a copy of this object
        /// </summary>
        /// <returns></returns>
        public IniValue GetACopy()
        {
            IniValue clone = (IniValue)MemberwiseClone();
            clone.Values = new StringCollection();
            clone.Parameters = new StringCollection();
            foreach (string s in Values)
            {
                clone.Values.Add(s);
            }

            foreach (string s in Parameters)
            {
                clone.Parameters.Add(s);
            }

            return clone;
        }

        /// <summary>
        /// Number of available parameters.
        /// </summary>
        public int Count => Parameters.Count;

        /// <summary>
        /// Remove all parameters.
        /// </summary>
        public void Clear()
        {
            Parameters.Clear();
            Values.Clear();
        }

        /// <summary>
        /// Return the value of a parameter and remove it from the list of parameters.
        /// </summary>
        /// <param name="parameter">The parameter name to look at. Search is case insensitive.</param>
        /// <param name="defaultValue">The value to return if parameter is not present.</param>
        /// <returns>The parameter value.
        /// If parameter is present but has no value, an empty string ("") is returned.
        /// If parameter is not present, defaultValue is returned.</returns>
        public string ValueOf(string parameter, string defaultValue = null)
        {
            string paramValue = defaultValue;
            for (int i = 0; i < Count; i++)
            {
                if (Parameters[i] == parameter.ToUpper())
                {
                    paramValue = Values[i];
                    Parameters.RemoveAt(i);
                    Values.RemoveAt(i);
                    break;
                }
            }

            return paramValue;
        }

        /// <summary>
        /// Return the value of a parameter without removing it from the list of parameters.
        /// </summary>
        /// <param name="parameter">The parameter name to look at. Search is case insensitive.</param>
        /// <param name="defaultValue">The value to return if parameter is not present.</param>
        /// <returns>The parameter value.
        /// If parameter is present but has no value, an empty string ("") is returned.
        /// If parameter is not present, defaultValue is returned.</returns>
        public string Peek(string parameter, string defaultValue)
        {
            string paramValue = defaultValue;
            for (int i = 0; i < Count; i++)
            {
                if (Parameters[i] == parameter.ToUpper())
                {
                    paramValue = Values[i];
                    break;
                }
            }

            return paramValue;
        }

        private string GetWord(StringBuilder buffer)
        {
            int pos = 0;
            while (pos < buffer.Length && buffer[pos] > ' ')
            {
                pos++;
            }

            string result = buffer.ToString(0, pos);
            while (pos < buffer.Length && buffer[pos] <= ' ')
            {
                pos++;
            }

            buffer.Remove(0, pos);
            return result;
        }

        private int QuotesCount(string str)
        {
            int res = 0;
            for (int i = 0; i < str.Length; i++)
            {
                if (str[i] == '"')
                {
                    res++;
                }
            }

            return res;
        }

        /// <summary>
        /// Parse the INI string splitting it in the basic components.
        /// If the string starts with ';' or is empty, the object will contain a "" in the name and no parameters.
        /// </summary>
        /// <param name="line">The INI file line to be parsed.</param>
        public void Parse(string line)
        {
            if (line == null)
            {
                return;
            }

            line = line.Trim();
            if (line.StartsWith(";") || line == "")
            {
                return;
            }

            StringBuilder buffer = new StringBuilder(line.Trim());

            while (buffer.Length > 0)
            {
                string param = GetWord(buffer);

                // If the number of quotes in the string is even, then it means that a part of
                // the string is missing, up to the ending quote
                while (((QuotesCount(param) % 2) != 0) && (buffer.Length > 0))
                {
                    param += " " + GetWord(buffer);
                }

                // Remove quotes from the string, in case the whole string is quoted
                if (param.Length > 2 && param[0] == '"' && param[param.Length - 1] == '"')
                {
                    param = param.Substring(1, param.Length - 2).Trim();
                }

                // if Name is empty, name must be defined.
                if (Name == "")
                {
                    Name = param.ToUpper();
                }
                else
                {
                    // Parse the word looking for the equal sign. If found split the word.
                    // Add then word to the parameters and values list.
                    int pos = param.IndexOf('=');
                    if (pos > 0)
                    {
                        string par = param.Substring(0, pos).ToUpper();
                        // Remove quotes from the parameter name
                        if (par.Length > 2 && par[0] == '"' && par[par.Length - 1] == '"')
                        {
                            par = par.Substring(1, par.Length - 2).Trim();
                        }

                        Parameters.Add(par);

                        // Remove quotes from the value
                        string val = param.Substring(pos + 1);
                        if (val.Length > 2 && val[0] == '"' && val[val.Length - 1] == '"')
                        {
                            val = val.Substring(1, val.Length - 2).Trim();
                        }

                        Values.Add(val);
                    }
                    else
                    {
                        if (Name == "SHOP" || Name == "TILL")
                        {
                            Parameters.Add(param);
                        }
                        else
                        {
                            Parameters.Add(param.ToUpper());
                        }

                        Values.Add("");
                    }
                }
            }
        }

        /// <summary>
        /// ToString returns the ini file line rebuilt.
        /// </summary>
        /// <param name="addName">Indicates if the Name should be included in the returned string or not</param>
        /// <returns></returns>
        public string ToString(bool addName)
        {
            StringBuilder ret = new StringBuilder();

            if (addName)
            {
                ret.Append(Name.ToUpper());
            }

            for (int i = 0; i < Parameters.Count; i++)
            {
                ret.Append(" ");
                ret.Append(AddQuotes(Parameters[i]));

                if (Values[i] != "")
                {
                    ret.Append("=");
                    ret.Append(AddQuotes(Values[i]));
                }
            }

            return ret.ToString().Trim();
        }

        /// <summary>
        /// ToString returns the ini file line rebuilt.
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            return ToString(true);
        }

        private string AddQuotes(string str)
        {
            if (str.IndexOf(" ", StringComparison.Ordinal) > 0)
            {
                return '"' + str + '"';
            }

            return str;
        }

        /// <summary>
        /// Replace this IniValue line in a INI file.
        /// If the old value is not present, the new one is appended at the end of the file.
        /// </summary>
        /// <param name="fileName"></param>
        public void WriteToIniFile(string fileName)
        {
            TextReader inputIni = null;
            IniValue oldValue = null;
            // First, checks if the value is already present, and in which line
            if (File.Exists(fileName))
            {
                oldValue = GetParameter(fileName, Name);
                inputIni = new StreamReader(fileName, Encoding.GetEncoding(1252));
            }

            StringBuilder outBuffer = new StringBuilder();
            if (inputIni != null)
            {
                // If the old value was present in the file, then reconstructs
                // the file substituting the line
                if (oldValue != null)
                {
                    for (int i = 1; i < oldValue.NumLine; i++)
                    {
                        outBuffer.Append(inputIni.ReadLine() + '\n');
                    }

                    // Now discards the current line, which has to be substituted
                    inputIni.ReadLine();
                    outBuffer.Append(ToString() + '\n');
                }
                else // directly adds the new parameter
                {
                    outBuffer.Append(ToString() + '\n');
                }

                // Now gets the rest of the file, if the old value wasn't set, this will get
                // the complete file
                string line;
                while ((line = inputIni.ReadLine()) != null)
                {
                    outBuffer.Append(line + '\n');
                }

                inputIni.Close();
            }
            else
            {
                outBuffer.Append(ToString());
            }

            TextWriter outputIni = new StreamWriter(fileName, false, Encoding.GetEncoding(1252));
            try
            {
                outputIni.Write(outBuffer.ToString());
            }
            finally
            {
                outputIni.Close();
            }
        }

        /// <summary>
        /// Replaces text in a file.
        /// </summary>
        /// <param name="filePath">Path of the text file.</param>
        /// <param name="searchText">Text to search for.</param>
        /// <param name="replaceText">Text to replace the search text.</param>
        /// <returns>Returns True if the file is changed, otherwise false</returns>
        public static bool ReplaceInFile(string filePath, string searchText, string replaceText)
        {
            StreamReader reader = new StreamReader(filePath);
            string content = reader.ReadToEnd();
            reader.Close();

            // Skip the lines commented ;xxxxxxx
            string pattern = @"(?<!;)" + searchText;

            string contentResult = Regex.Replace(content, pattern, replaceText, RegexOptions.IgnoreCase);

            if (contentResult != content)
            {
                using (StreamWriter writer = new StreamWriter(filePath))
                {
                    writer.Write(contentResult);
                }

                return true;
            }

            return false;
        }

        /// <summary>
        /// Read the INI file looking for the given parameter.
        /// </summary>
        /// <param name="fileName">The file to parse.</param>
        /// <param name="parameterName">The parameter to look for.</param>
        /// <returns>The IniValue for that parameter. If not found, null is returned.</returns>
        public static IniValue GetParameter(string fileName, string parameterName)
        {
            bool found = false;
            IniValue param = null;

            if (File.Exists(fileName))
            {
                IniReader ini = new IniReader(fileName);
                while ((param = ini.ReadParam()) != null)
                {
                    if (param.Name == parameterName.ToUpper())
                    {
                        found = true;
                        break;
                    }
                }
            }

            return found ? param : null;
        }

        /// <summary>
        /// Creates dynamic properties with the same name of the ini parameters;
        /// these dynamic properties will be available through the dynamic property Data
        /// as in this example:  thisCurrentObject.Data.THE_DYNAMIC_PROPERTY_THAT_I_WANT_TO_READ.
        /// Dynamic property names are all created in uppercase.
        /// <paramref name="managedParameters"/> contains all the names of the properties to be created.
        /// The values of the dynamic properties are taken from the existing parameters found in the ini file parsed
        /// (if not present in the .ini file, then they'll have a default null value);
        /// </summary>
        /// <param name="managedParameters">An array of strings, each representing the name of a dynamic property to manage</param>
        public void CreateDynamicProperties(params string[] managedParameters)
        {
            lock (_createDynamicPropertiesLocker)
            {
                var dt = Data as IDictionary<string, object>;
                if (dt == null)
                {
                    return;
                }

                // add managed parameters and default values (managedParameters)
                foreach (string s in managedParameters)
                {
                    if (!dt.ContainsKey(s.ToUpper()))
                    {
                        dt[s.ToUpper()] = null;
                    }
                }

                // add values read from ini parameters
                for (int i = Count - 1; i >= 0; i--)
                {
                    string key = Parameters[i].ToUpper();
                    if (dt.ContainsKey(key))
                    {
                        string val = ValueOf(key).ToUpper();
                        dt[key] = val;
                    }
                }
            }
        }

    }

    /// <summary>
    /// This class is used to read an INI file line by line.
    /// It manages comments and so on...
    /// </summary>
    public class IniReader
    {
        /// <summary>
        /// The lines present in the file.
        /// Comment lines are saved as spaces
        /// </summary>
        private StringCollection lines;

        /// <summary>
        /// The current line of the file.
        /// </summary>
        private int currentLine;

        /// <summary>
        /// Class constructor, using a text file
        /// </summary>
        /// <param name="iniFileName">The name of the text file</param>
        public IniReader(string iniFileName)
        {
            using (TextReader reader = new StreamReader(iniFileName, Encoding.GetEncoding(1252)))
            {
                CreateLines(reader);
            }
        }

        /// <summary>
        /// Class constructor, using a stream
        /// </summary>
        /// <param name="reader">The stream that contains the lines. The stream is closed when all lines are read.</param>
        public IniReader(TextReader reader)
        {
            CreateLines(reader);
            reader.Close();
        }

        /// <summary>
        /// Create the array that contains the lines present in the file removing
        /// the comment lines.
        /// </summary>
        /// <param name="file"></param>
        private void CreateLines(TextReader file)
        {
            string line;
            bool blockCommentOn = false;

            lines = new StringCollection();

            while ((line = file.ReadLine()) != null)
            {
                line = line.Trim();

                if (line.StartsWith("/*"))
                {
                    blockCommentOn = true;
                }

                if (blockCommentOn || line.StartsWith(";"))
                {
                    lines.Add("");
                }
                else
                {
                    lines.Add(line);
                }

                if (line.EndsWith("*/"))
                {
                    blockCommentOn = false;
                }
            }
        }

        /// <summary>
        /// Get the next valid ini file parameter
        /// </summary>
        /// <returns>The next ini parameter if a valid parameter, null if no more parameters are present.</returns>
        public IniValue ReadParam()
        {
            // Skip empty lines
            while (currentLine < lines.Count && lines[currentLine] == "")
            {
                currentLine++;
            }

            // If we are at the end of the file, return null
            if (currentLine >= lines.Count)
            {
                return null;
            }

            // Return the current line and move to the next
            string line = lines[currentLine++];

            return new IniValue(line, currentLine);
        }

        /// <summary>
        /// Get the parameter from the INI file, if it exists.
        /// </summary>
        /// <param name="parameterName">Na</param>
        /// <returns>The read IniValue, or null if no parameters match the given name</returns>
        public IEnumerable<IniValue> ReadParam(string parameterName)
        {
            IniValue param;
            while ((param = ReadParam()) != null)
            {
                if (param.Name == parameterName.ToUpper())
                {
                    yield return param;
                }
            }
        }
    }
}
